<?php

namespace AppBundle\Repository;

use Symfony\Component\HttpFoundation\ParameterBag;
use Doctrine\ORM\Query\Expr\Join;
use Doctrine\ORM\Query\ResultSetMapping;
use AppBundle\Exception\SiparInvalidoException;

/**
 * ProjetoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProjetoRepository extends RepositoryAbstract
{
    use \AppBundle\Traits\MaskTrait;
    
    /**
     * @param ParameterBag $params
     * @return \AppBundle\Entity\Projeto[]
     */
    public function search(ParameterBag $params)
    {
        $qb = $this->createQueryBuilder('p');
        
        $qb
            ->select('p, pci, c, i, s, pj, pe')
            ->join('p.publicacao', 'pu')
            ->leftJoin('p.campus', 'pci')
            ->leftJoin('pci.campus', 'c')
            ->leftJoin('c.instituicao', 'i')
            ->leftJoin('p.secretarias', 's')
            ->leftJoin('s.pessoaJuridica', 'pj')
            ->leftJoin('pj.pessoa', 'pe');
        
        if ($params->get('nuSipar')) {
            $qb->andWhere('p.nuSipar = :sipar')
               ->setParameter('sipar', $params->get('nuSipar'));
        }
        
        if ($params->getInt('publicacao')) {
            $qb->andWhere('pu.coSeqPublicacao = :publicacao')
               ->setParameter('publicacao', $params->getInt('publicacao'));
        }
        
        if ($params->get('instituicaoEnsino')) {
            $qb
               ->andWhere('upper(i.noInstituicaoProjeto) like :instituicaoEnsino')
               ->setParameter('instituicaoEnsino', '%' . mb_strtoupper($params->get('instituicaoEnsino')) . '%');
        }
        
        if ($params->get('secretariaSaude')) {
            $qb
               ->andWhere('upper(pe.noPessoa) like :secretariaSaude')
               ->setParameter('secretariaSaude', '%' . mb_strtoupper($params->get('secretariaSaude')) . '%');
        }
        
        $qb->orderBy('p.coSeqProjeto', 'desc');
        
        return $qb;        
    }
    
    public function searchRelatorioPagamento(ParameterBag $params)
    {
        $qb = $this->getQbAutorizados($params);
     
        if($params->getInt('stProjetoFolha') == \AppBundle\Entity\SituacaoProjetoFolha::HOMOLOGADA) {
            $qb = $this->getQbHomologadas($params);
        }
        
        if($params->get('nuSipar')) {
            $qb->andWhere('pr.nuSipar like :nuSipar')
                ->setParameter('nuSipar', '%' . $params->get('nuSipar') . '%');
        }
        if($params->get('nuMes')) {
            $date = $params->get('nuMes');
            if(!empty($date['month'])) {
                $qb->andWhere('fp.nuMes = :nuMes')
                    ->setParameter('nuMes', str_pad($date['month'], 2, 0, STR_PAD_LEFT));
            }
        }
        if($params->get('noInstituicaoProjeto')) {
            $qb->andWhere('upper(i.noInstituicaoProjeto) like upper(:noInstituicaoProjeto)')
                ->setParameter('noInstituicaoProjeto', '%' . $params->get('noInstituicaoProjeto') . '%');
        }
        if($params->get('noPessoa')) {
            $qb->andWhere('upper(sp.noPessoa) like upper(:noPessoa)')
                ->setParameter('noPessoa', '%' . $params->get('noPessoa') . '%');
        }
        
        $qb->orderBy('sp.noPessoa', 'asc');
        
//        dump($qb->getQuery()->getSQL());die;
        
        return $qb;    
    }
    
    private function getQbAutorizados(ParameterBag $params) {
        $dqlBolsasAutorizadas = <<<SQL
            (
            SELECT COUNT(af.coSeqAutorizacaoFolha) 
                FROM AppBundle:AutorizacaoFolha af
            WHERE af.projetoFolhaPagamento = prfp.coSeqProjFolhaPagam
                AND af.stParecer = 'S'
            ) as qtBolsaAutorizada
SQL;
        $dqlDataAutorizacao = <<<SQL
            (
            SELECT dtaf.dtInclusao
                FROM AppBundle:AutorizacaoFolha dtaf
            WHERE dtaf.projetoFolhaPagamento = prfp.coSeqProjFolhaPagam
                AND dtaf.stParecer = 'S'
            ) as dtInclusao
SQL;
        
        $dqlDataAutorizacao = $this->getEntityManager()
            ->createQuery($dqlDataAutorizacao);
        
        $qb = $this->createQueryBuilder('pr');
        $qb->select('pr.nuSipar, fp.nuMes, pr.qtBolsa, i.noInstituicaoProjeto, sp.noPessoa')
            ->addSelect($dqlBolsasAutorizadas)
            ->addSelect($dqlDataAutorizacao)
            ->join('AppBundle:ProjetoCampusInstituicao', 'prci', Join::INNER_JOIN, 'prci.projeto = pr.coSeqProjeto')
            ->join('prci.campus', 'c')
            ->join('c.instituicao', 'i')
            ->join('pr.secretarias', 's')
            ->join('s.pessoaJuridica', 'spj')
            ->join('spj.pessoa', 'sp')
            ->leftJoin('AppBundle:ProjetoFolhaPagamento', 'prfp', Join::LEFT_JOIN, 'prfp.projeto = pr.coSeqProjeto')
            ->leftJoin('prfp.folhaPagamento', 'fp')
            ->leftJoin('prfp.situacao', 'st')
            ->where('st.coSeqSituacaoProjFolha = :stProjetoFolha')
            ->setParameter('stProjetoFolha', $params->getInt('stProjetoFolha'));
        
        return $qb;
    }
    
    private function getHomologadas(ParameterBag $params) 
    {
        $dqlCoordenador = <<<SQL
            (
                
            )
SQL;
        
        $qb = $this->createQueryBuilder('pr');
        $qb->select('pr.nuSipar, p.noPessoa, pf.nuCpf, af.vlBolsa, af.dtInclusao')
           ->addSelect($dqlCoordenador)
           ->leftJoin('AppBundle:ProjetoFolhaPagamento', 'prfp', Join::LEFT_JOIN, 'prfp.projeto = pr.coSeqProjeto')
           ->leftJoin('prfp.autorizacaoFolha', 'af')
           ->leftJoin('af.projetoPessoa', 'prp')
           ->leftJoin('prp.pessoaPerfil', 'pper')
           ->leftJoin('pper.pessoaFisica', 'pf')
           ->leftJoin('pf.pessoa', 'p')
           ->orderBy('pr.nuSipar');
        
        return $qb;
    }
    
    public function searchRelatorioProjeto(ParameterBag $params)
    {
        $queryParams = $queryTypes = [];
        $queryParamsStr = '';

        if ($params->get('nuSipar')) {
            $queryParamsStr .= ' AND PR.NU_SIPAR LIKE ? ';
            $queryParams[] = trim($params->get('nuSipar')) . '%';
            $queryTypes[] = \PDO::PARAM_STR;
        }
        if ($params->get('grupoAtuacao')) {
            $queryParamsStr .= ' AND SUB_ATUACAO.NO_GRUPO_ATUACAO LIKE ? ';
            $queryParams[] = '%' . $params->get('grupoAtuacao') . '%';
            $queryTypes[] = \PDO::PARAM_STR;
        }
        if($params->get('campus')) {
            $queryParamsStr .= ' AND SUB_INST.NO_INSTITUICAO_PROJETO LIKE ? ';
            $queryParams[] = '%' . $this->maskcnpj($params->get('campus')) . '%';
            $queryTypes[]  = \PDO::PARAM_STR;
        }
        if ($params->get('ufSecretaria')) {
            $queryParamsStr .= ' AND SUB_SEC.CO_UF_IBGE = ? ';
            $queryParams[] = (int) $params->get('ufSecretaria');
            $queryTypes[] = \PDO::PARAM_INT;
        }
        if ($params->get('municipioSecretaria')) {
            $queryParamsStr .= ' AND SUB_SEC.CO_MUNICIPIO_IBGE = ? ';
            $queryParams[] =  $params->get('municipioSecretaria');
            $queryTypes[] = \PDO::PARAM_STR;
        }
        if ($params->get('secretaria')) {
            $queryParamsStr .= ' AND SUB_SEC.NO_SECRETARIA_SAUDE LIKE ? ';
            $queryParams[] = '%' . $this->maskcnpj($params->get('secretaria')) . '%';
            $queryTypes[] = \PDO::PARAM_STR;
        }
        
        $query = <<<SQL
                    SELECT DISTINCT PR.CO_SEQ_PROJETO,
                            PR.NU_SIPAR,
                            FP.NU_MES,
                            FP.NU_ANO,
                            FP.TP_FOLHA_PAGAMENTO,
                            PR.QT_BOLSA,
                            FP.VL_TOTAL,
                            SUB_FOLHA.TOTAL_PARTICIPANTE,
                            SUB_FOLHA.VL_FOLHA_MES,
                            SUB_INST.NO_INSTITUICAO_PROJETO,
                            SUB_SEC.NO_SECRETARIA_SAUDE,
                            SUB_SEC.CO_UF_IBGE,                            
                            SUB_ATUACAO.NO_GRUPO_ATUACAO
            FROM   DBPET.TB_PROJETO PR
                   INNER JOIN (SELECT DISTINCT A2.CO_PROJETO,
                                               LISTAGG('('
                                                       || ( SUBSTR(C2.NU_CNPJ, 1, 2)
                                                            || '.'
                                                            || SUBSTR(C2.NU_CNPJ, 3, 3)
                                                            || '.'
                                                            || SUBSTR(C2.NU_CNPJ, 6, 3)
                                                            || '/'
                                                            || SUBSTR(C2.NU_CNPJ, 9, 4)
                                                            || '-'
                                                            || SUBSTR(C2.NU_CNPJ, 13, 2) )
                                                       || ') '
                                                       || C2.NO_INSTITUICAO_PROJETO, ', ')
                                                 WITHIN GROUP( ORDER BY
                                                 C2.CO_SEQ_INSTITUICAO) OVER
                                                 (
                                                   PARTITION BY A2.CO_PROJETO )
                                                         NO_INSTITUICAO_PROJETO
                               FROM   DBPET.RL_PROJETO_CAMPUSINTITUICAO A2
                                      INNER JOIN DBPET.TB_CAMPUS_INSTITUICAO B2
                                              ON A2.CO_CAMPUS_INSTITUICAO =
                                                 B2.CO_SEQ_CAMPUS_INSTITUICAO
                                                 AND A2.ST_REGISTRO_ATIVO = 'S'
                                                 AND B2.ST_REGISTRO_ATIVO = 'S'
                                      INNER JOIN DBPET.TB_INSTITUICAO C2
                                              ON B2.CO_INSTITUICAO = C2.CO_SEQ_INSTITUICAO
                                                 AND C2.ST_REGISTRO_ATIVO = 'S'
                               GROUP  BY A2.CO_PROJETO,
                                         C2.NU_CNPJ,
                                         C2.NO_INSTITUICAO_PROJETO,
                                         C2.CO_SEQ_INSTITUICAO) SUB_INST
                           ON PR.CO_SEQ_PROJETO = SUB_INST.CO_PROJETO
                   INNER JOIN (SELECT DISTINCT A.CO_PROJETO,
                                               LISTAGG('('
                                                       || ( SUBSTR(B.NU_CNPJ, 1, 2)
                                                            || '.'
                                                            || SUBSTR(B.NU_CNPJ, 3, 3)
                                                            || '.'
                                                            || SUBSTR(B.NU_CNPJ, 6, 3)
                                                            || '/'
                                                            || SUBSTR(B.NU_CNPJ, 9, 4)
                                                            || '-'
                                                            || SUBSTR(B.NU_CNPJ, 13, 2) )
                                                       || ') '
                                                       || COALESCE(B.NO_FANTASIA,
                                                          C.NO_PESSOA), ','
                                                                                 )
                                                 WITHIN GROUP( ORDER BY
                                                 A.CO_SEQ_SECRETARIA_SAUDE)
                                                 OVER(
                                                   PARTITION BY A.CO_PROJETO)
                                               NO_SECRETARIA_SAUDE,
                                               D.CO_MUNICIPIO_IBGE,
                                               D.CO_UF_IBGE
                               FROM   DBPET.TB_SECRETARIA_SAUDE A
                                      INNER JOIN DBPESSOA.TB_PESSOA_JURIDICA B
                                              ON A.NU_CNPJ = B.NU_CNPJ
                                      INNER JOIN DBPESSOA.TB_PESSOA C
                                              ON B.NU_CNPJ = C.NU_CPF_CNPJ_PESSOA
                                      INNER JOIN DBGERAL.TB_MUNICIPIO D
                                              ON C.CO_MUNICIPIO_IBGE = D.CO_MUNICIPIO_IBGE
                               GROUP  BY A.CO_PROJETO,
                                         A.CO_SEQ_SECRETARIA_SAUDE,
                                         B.NO_FANTASIA,
                                         B.NU_CNPJ,
                                         C.NO_PESSOA,
                                         D.CO_MUNICIPIO_IBGE,
                                         D.CO_UF_IBGE) SUB_SEC
                           ON PR.CO_SEQ_PROJETO = SUB_SEC.CO_PROJETO
                   INNER JOIN DBPET.TB_PROJETO_FOLHAPAGAMENTO PRFP
                     ON PRFP.CO_PROJETO = PR.CO_SEQ_PROJETO
                   INNER JOIN DBPET.TB_FOLHA_PAGAMENTO FP
                     ON FP.CO_SEQ_FOLHA_PAGAMENTO = PRFP.CO_FOLHA_PAGAMENTO
                        AND FP.TP_FOLHA_PAGAMENTO = 'M'
                        AND FP.CO_SITUACAO_FOLHA <> 7 --CANCELADA   
                   LEFT JOIN (SELECT DISTINCT AT.CO_PROJETO,
                                              LISTAGG(GA.NO_GRUPO_ATUACAO, ', ')
                                                WITHIN GROUP(ORDER BY
                                                GA.CO_SEQ_GRUPO_ATUACAO) OVER
                                                (
                                                  PARTITION BY AT.CO_PROJETO)
                                              NO_GRUPO_ATUACAO
                              FROM   DBPET.TB_AREA_TEMATICA AT
                                     LEFT JOIN DBPET.RL_AREATEMATICA_GRUPOATUACAO ATGA
                                            ON ATGA.CO_AREA_TEMATICA =
                                               AT.CO_SEQ_AREA_TEMATICA
                                     LEFT JOIN DBPET.TB_GRUPO_ATUACAO GA
                                            ON GA.CO_SEQ_GRUPO_ATUACAO =
                                               ATGA.CO_GRUPO_ATUACAO)
                             SUB_ATUACAO
                          ON PR.CO_SEQ_PROJETO = SUB_ATUACAO.CO_PROJETO
                   INNER JOIN (SELECT COUNT(AF.CO_SEQ_AUTORIZACAO_FOLHA) TOTAL_PARTICIPANTE,
                                      PF.CO_SEQ_PROJ_FOLHA_PAGAM,
                                      PF.CO_PROJETO,
                                      SUM(AF.VL_BOLSA)                   VL_FOLHA_MES
                               FROM   DBPET.TB_AUTORIZACAO_FOLHA AF
                                      INNER JOIN DBPET.TB_PROJETO_FOLHAPAGAMENTO PF
                                              ON AF.CO_PROJ_FOLHA_PAGAM =
                                                 PF.CO_SEQ_PROJ_FOLHA_PAGAM
                                                 AND AF.ST_REGISTRO_ATIVO = 'S'
                                      INNER JOIN DBPET.TB_FOLHA_PAGAMENTO FP
                                              ON PF.CO_FOLHA_PAGAMENTO =
                                                 FP.CO_SEQ_FOLHA_PAGAMENTO
                                                 AND FP.TP_FOLHA_PAGAMENTO = 'M'
                                                 AND FP.CO_SITUACAO_FOLHA <> 7 --CANCELADA                               
                               GROUP  BY PF.CO_PROJETO,
                                         PF.CO_SEQ_PROJ_FOLHA_PAGAM) SUB_FOLHA
                           ON PR.CO_SEQ_PROJETO = SUB_FOLHA.CO_PROJETO
                              AND PRFP.CO_SEQ_PROJ_FOLHA_PAGAM =
                                  SUB_FOLHA.CO_SEQ_PROJ_FOLHA_PAGAM
            WHERE  PR.CO_SEQ_PROJETO IS NOT NULL  
SQL;

        $orderByClausule = '';
        if ($params->get('order-by') && $params->get('sort')) {
            $orderByClausule .= ' ORDER BY ' . $params->get('order-by') . ' ' . $params->get('sort');
        }

        $stmt = $this->_em->getConnection()->executeQuery(
                $query . $queryParamsStr . $orderByClausule, $queryParams, $queryTypes
        );



        return $stmt->fetchAll();
    }

    public function findParticipanteOrientadorByProjeto($coProjeto, $coPerfil)
    {
        $queryParams = $queryTypes = [];

        $query = <<<SQL
                   SELECT count(*) AS NR_ORIENTADOR FROM 
                    DBPET.TB_PROJETO_PESSOA tp
                   INNER JOIN DBPET.TB_PESSOA_PERFIL per ON per.CO_SEQ_PESSOA_PERFIL = tp.CO_PESSOA_PERFIL 
                   WHERE tp.ST_REGISTRO_ATIVO = 'S'
                   AND tp.CO_PROJETO = ? 
                   AND per.CO_PERFIL = ? 
SQL;

        $queryParams[] = (int) $coProjeto;
        $queryTypes[]  = \PDO::PARAM_INT;

        $queryParams[] = (int) $coPerfil;
        $queryTypes[]  = \PDO::PARAM_INT;

        $stmt = $this->_em->getConnection()->executeQuery(
                $query, $queryParams, $queryTypes
        );

        return $stmt->fetchAll();
    }


    public function findParticipantesByProjetoAndPefilAndGroup($coProjeto, $coPerfil, $coGrupo, $cpf)
    {
        $queryParams = $queryTypes = [];

        $query = <<<SQL
                  SELECT 
                        COUNT(*) AS NR_CADASTRADO
                    FROM 
                        DBPET.TB_PROJETO_PESSOA tp
                    INNER JOIN DBPET.TB_PESSOA_PERFIL per ON per.CO_SEQ_PESSOA_PERFIL = tp.CO_PESSOA_PERFIL 
                    INNER JOIN DBPET.RL_PROJETOPESSOA_GRUPOATUACAO gru ON gru.CO_PROJETO_PESSOA = tp.CO_SEQ_PROJETO_PESSOA  
                    WHERE tp.ST_REGISTRO_ATIVO = 'S'
                    AND tp.CO_PROJETO = ? 
                    AND per.CO_PERFIL = ? 
                    AND gru.CO_GRUPO_ATUACAO = ? 
                    AND per.NU_CPF <> ? 
SQL;

        $queryParams[] = (int) $coProjeto;
        $queryTypes[]  = \PDO::PARAM_INT;

        $queryParams[] = (int) $coPerfil;
        $queryTypes[]  = \PDO::PARAM_INT;

        $queryParams[] = (int) $coGrupo;
        $queryTypes[]  = \PDO::PARAM_INT;

        $queryParams[] = $cpf;
        $queryTypes[]  = \PDO::PARAM_STR;

        $stmt = $this->_em->getConnection()->executeQuery(
            $query, $queryParams, $queryTypes
        );

        return $stmt->fetchAll();
    }

    /**
     * @param $nuSipar
     * @param null $publicacao
     * @param bool $checkVigencia
     * @return \AppBundle\Entity\Projeto
     * @throws SiparInvalidoException
     */
    public function getBySipar($nuSipar, $publicacao = null, $checkVigencia = true)
    {
        /* @var \AppBundle\Entity\Projeto $projeto */
        $projeto = $this->findOneBy([
            'nuSipar' => $nuSipar,
            'stRegistroAtivo' => 'S',
        ]);

        if (!$projeto) {
            throw new SiparInvalidoException();
        }

        if ($checkVigencia && !$projeto->getPublicacao()->isVigente()) {
            throw SiparInvalidoException::onSiparBelongsToExpiredPrograma();
        }

        if ($publicacao && $projeto->getPublicacao()->getCoSeqPublicacao() !== (int)$publicacao) {
            throw SiparInvalidoException::onSiparNotBelongsToPrograma();
        }
        
        return $projeto;
    }

}
