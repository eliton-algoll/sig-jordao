<?php

namespace App\Repository;

use App\Entity\Programa;
use App\Entity\AgenciaBancaria;
use App\Repository\RepositoryAbstract;
use Doctrine\Persistence\ManagerRegistry;
use Symfony\Component\HttpFoundation\ParameterBag;

/**
 * ProjetoPessoaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProjetoPessoaRepository extends RepositoryAbstract
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, AgenciaBancaria::class);
    }
    
    /**
     * @param ParameterBag $params
     * @return \Doctrine\DBAL\Query\QueryBuilder
     */
    public function search(ParameterBag $params)
    {
        $qb = $this->createQueryBuilder('prp');

        $select = [
            'prp.coSeqProjetoPessoa',
            'p.noPessoa',
            'p.nuCpfCnpjPessoa',
            'pr.nuSipar',
            'per.coSeqPerfil',
            'per.dsPerfil',
            'prp.stRegistroAtivo',
            'prp.dtDesligamento',
            'prp.stVoluntarioProjeto',
            'cg.dsCursoGraduacao',
            'ga.noGrupoAtuacao',
            'ga.coEixoAtuacao'
        ];

        $qb->select(implode(', ', $select))
            ->leftJoin('prp.projeto', 'pr')
            ->leftJoin('prp.pessoaPerfil', 'pper')
            ->leftJoin('pper.perfil', 'per')
            ->leftJoin('pper.pessoaFisica', 'pes')
            ->leftJoin('pes.pessoa', 'p')
            ->leftJoin('pes.dadoPessoal', 'dp')
            ->leftJoin('pr.publicacao', 'pu')
            ->leftJoin('pu.programa', 'pro')
            ->leftJoin(
                'prp.projetoPessoaGrupoAtuacao',
                'ppga',
                'WITH',
                'pro.tpPrograma = :tpPrograma AND ppga.stRegistroAtivo = \'S\''
            )
            ->leftJoin(
                'ppga.grupoAtuacao',
                'ga',
                'WITH',
                'ga.stRegistroAtivo = \'S\''
            )
            ->leftJoin('prp.projetoPessoaCursoGraduacao',
                       'ppcg',
                'WITH',
                'ppcg.stRegistroAtivo = \'S\'')
            ->leftJoin('ppcg.cursoGraduacao', 'cg')
            ->where("p.stRegistroAtivo = 'S'")
            ->setParameter('tpPrograma', Programa::GRUPO_TUTORIAL);
        
        if($params->get('noPessoa')) {
            $qb->andWhere('upper(p.noPessoa) like upper(:noPessoa)')
                ->setParameter('noPessoa', '%' . $params->get('noPessoa') . '%');
        }

        if($params->get('nuCpf')) {
            $qb->andWhere('pes.nuCpf like :nuCpf')
                ->setParameter('nuCpf', '%' . $params->getAlnum('nuCpf') . '%');
        }

        if($params->get('coPerfil')) {
            $qb->andWhere('per.coSeqPerfil = :coPerfil')
                ->setParameter('coPerfil', $params->getDigits('coPerfil'));
        }

        if($params->get('nuSipar')) {
            $qb->andWhere('pr.nuSipar like :nuSipar')
                ->setParameter('nuSipar', '%' . $params->get('nuSipar') . '%');
        }

        if($params->get('coPrograma')) {
            $qb->andWhere('pro.coSeqPrograma = :coPrograma')
                ->setParameter('coPrograma', $params->getInt('coPrograma'));
        }

        if($params->get('coDadoPessoal')) {
            $qb->andWhere('p.coSeqDadoPessoal = :coDadoPessoal')
                ->setParameter('coDadoPessoal', $params->getInt('coDadoPessoal'));
        }
        
        if($params->get('projeto')) {
            $projeto = $params->get('projeto');
            $qb->andWhere('pr.coSeqProjeto = :coSeqProjeto')
                ->setParameter('coSeqProjeto', $projeto->getCoSeqProjeto());
        }

        if($params->get('pessoaPerfil')) {
            $pessoaPerfil = $params->get('pessoaPerfil');
            if(!$pessoaPerfil->getPerfil()->isAdministrador()) {
                $qb->andWhere("prp.stRegistroAtivo = 'S'");
            }
        }

        if($params->get('stRegistroAtivo')) {
            $qb->andWhere('prp.stRegistroAtivo = :stRegistroAtivo')
                ->setParameter('stRegistroAtivo', $params->get('stRegistroAtivo'));
        }

        if ($params->get('grupoTutorial')) {
            $qb->andWhere('ga.coSeqGrupoAtuacao = :grupoAtuacao')
                ->setParameter('grupoAtuacao', $params->get('grupoTutorial'));
        }
        
        $qb->orderBy('p.noPessoa', 'asc');

//        var_dump($qb->getQuery()->getSQL());
//        die;
        return $qb;
    }
    
    /**
     * 
     * @param integer|\App\Entity\Projeto $projeto
     * @return array
     */
    public function findByProjeto($projeto)
    {
        $projeto = ($projeto instanceof \App\Entity\Projeto) ? $projeto->getCoSeqProjeto() : $projeto;
        
        $qb = $this->createQueryBuilder('pp');
        
        return $qb->select('pp, ppf, perf, pf, p, ppga, ga, atga, at, tat')
            ->innerJoin('pp.pessoaPerfil', 'ppf')
            ->innerJoin('ppf.perfil', 'perf')
            ->innerJoin('ppf.pessoaFisica', 'pf')
            ->innerJoin('pf.pessoa', 'p')
            ->innerJoin('pp.projetoPessoaGrupoAtuacao', 'ppga')
            ->innerJoin('ppga.grupoAtuacao', 'ga')
            ->innerJoin('ga.areasTematicasGruposAtuacao', 'atga')
            ->innerJoin('atga.areaTematica', 'at')
            ->innerJoin('at.tipoAreaTematica', 'tat')
            ->innerJoin('pp.projeto', 'proj')
            ->where($qb->expr()->eq('pp.projeto', ':coProjeto'))
            ->setParameter('coProjeto', $projeto)
            ->getQuery()
            ->getResult();
    }
    
    public function searchRelatorioParticipante(ParameterBag $params)
    {
        $qb = $this->createQueryBuilder('prp');
        
        $qb->select('pr.nuSipar, per.dsPerfil, p.noPessoa, pf.nuCpf, cg.dsCursoGraduacao, prp.stVoluntarioProjeto, ga.noGrupoAtuacao')
            ->join('prp.projeto', 'pr')
            ->join('prp.pessoaPerfil', 'pper')
            ->join('pper.perfil', 'per')
            ->join('pper.pessoaFisica', 'pf')
            ->join('pf.pessoa', 'p')
            ->leftJoin('prp.projetoPessoaCursoGraduacao', 'prpcg')
            ->leftJoin('prpcg.cursoGraduacao', 'cg')
            ->leftJoin('prp.projetoPessoaGrupoAtuacao', 'prga')
            ->leftJoin('prga.grupoAtuacao', 'ga')
            ->where("prp.stRegistroAtivo = 'S'")
            ->andWhere("pr.stRegistroAtivo = 'S'")
            ->andWhere("pper.stRegistroAtivo = 'S'")
            ->andWhere("per.stRegistroAtivo = 'S'")
            ->andWhere("prpcg.stRegistroAtivo = 'S'")
            ->andWhere("cg.stRegistroAtivo = 'S'")
            ->andWhere("prga.stRegistroAtivo = 'S'")
            ->andWhere("ga.stRegistroAtivo = 'S'");
        
        if($params->get('nuSipar')) {
            $qb->andWhere('pr.nuSipar like :nuSipar')
                ->setParameter('nuSipar', '%' . $params->get('nuSipar') . '%');
        }
        if($params->get('nuCpf')) {
            $qb->andWhere('pf.nuCpf like :nuCpf')
                ->setParameter('nuCpf', '%' . $params->get('nuCpf') . '%');
        }
        if($params->get('noPessoa')) {
            $qb->andWhere('upper(p.noPessoa) like :noPessoa')
                ->setParameter('noPessoa', '%' . mb_strtoupper($params->get('noPessoa')) . '%');
        }
        if($params->get('perfil')) {
            $qb->andWhere('per.coSeqPerfil = :perfil')
                ->setParameter('perfil', $params->getInt('perfil'));
        }
        if($params->get('stVoluntarioProjeto')) {
            $qb->andWhere('prp.stVoluntarioProjeto = :stVoluntarioProjeto')
                ->setParameter('stVoluntarioProjeto', $params->get('stVoluntarioProjeto'));
        }
        if($params->get('grupoAtuacao')) {
            $qb->andWhere('ga.noGrupoAtuacao = :grupoAtuacao')
                ->setParameter('grupoAtuacao', $params->get('grupoAtuacao'));
        }
        if($params->get('cursoGraduacao')) {
            $qb->andWhere('cg.coSeqCursoGraduacao = :cursoGraduacao')
                ->setParameter('cursoGraduacao', $params->getInt('cursoGraduacao'));
        }
        
        return $qb;
    }
    
    /**
     * 
     * @param array $projetos
     * @param array $perfis
     * @return \App\Entity\ProjetoPessoa[]
     */
    public function findByProjetosAndPerfis(array $projetos, array $perfis)
    {
        $qb = $this->createQueryBuilder('pp');
        
        return $qb->select('pp')
            ->innerJoin('pp.pessoaPerfil', 'pperf')
            ->where('pp.projeto IN(:projetos)')
            ->andWhere('pperf.perfil IN(:perfis)')
            ->andWhere('pp.stRegistroAtivo = :stAtivo')
            ->setParameters([
                'projetos' =>  $projetos,
                'perfis' => $perfis,
                'stAtivo' => 'S',
            ])->getQuery()->getResult();
    }

}
